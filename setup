#!/bin/bash

export MYDOTS="${HOME}/.local/mydots"

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

# install packages 
function pkg_install() {
   sudo pacman --needed --noconfirm -Syy "${pkg[@]}"  
}

# install aur packages
function pkg_aur() {
   pikaur --noconfirm -S --needed "${aur[@]}"
}

# install tools 
function devtool_install() {
   sudo pacman --needed --noconfirm -S "${dev_tools[@]}"
}

# install light weight aur helper 'pikaur'
function install_pikaur() {
   git clone https://aur.archlinux.org/pikaur.git /tmp/pikaur
   cd /tmp/pikaur && makepkg -si ; cd -
}

# install wayland sway
function setu_sway() {
   sudo pacman --needed --noconfirm -S sway swaybg swaylock swayidle wayland wayland-utils xorg-xwayland brightnessctl grim 
   
   # start sway 
   #[[ $(grep "exec sway" ${HOME}/.bashrc) ]] || sed 's/startx/sway/g' ${HOME}/.bashrc 
}

# install and setup openbox
function setup_openbox() {
   # install openbox and deps
   sudo pacman --needed --noconfirm -Syy openbox menumaker rxvt-unicode lxappearance obconf plank picom qt5ct

   # generate menu
   mmaker openbox -f -t Alacritty && openbox  --reconfigure  

   # install themes
   git clone https://github.com/addy-dclxvi/openbox-theme-collections ~/.themes

}

# install grub theme
function install_grubtheme() {
   git clone https://github.com/johdasgran/jinx-theme.git /tmp/jinx
   cd /tmp/jinx && sudo bash install.sh ; cd -
   sudo grub-mkconfig -o /boot/grub/grub.cfg
}

# other
function other() {
   # update clamav database 
   sudo freshclam

   # Download the kunst source code, save as kunst, make it executeable
   # and then move it to ~/.local/bin
   curl -L git.io/raw-kunst > kunst && chmod +x kunst && mv kunst ~/.local/bin
}

# enable services
function enable_services() {
   #sudo systemctl enable ly.service
   sudo systemctl enable ufw.service
   sudo systemctl enable clamav-freshclam.service
   #sudo systemctl enable clamav-daemon.service
   sudo systemctl enable auto-cpufreq.service
}

# create directory if don't exist
[[ -d ${HOME}/pix ]]                || mkdir -p ${HOME}/{pix,docs,videos,music,download,public}
[[ -d ${HOME}/.config ]]            || mkdir -p "${HOME}"/.config
[[ -d ${HOME}/.vim/undodir ]]       || mkdir -p "${HOME}"/.vim/.undodir 


function linkdots() {

# link script directory
[[ $(find .local/scripts -type l) ]] || ln -sf "${MYDOTS}"/scripts "${HOME}"/.local/scripts

for FILE in "${LINKS[@]}"; do 

   # backup dir
   [[ -d "${HOME}"/.config/old.conf ]] || mkdir -p "${HOME}"/.config/old.config
   
   # get file name from fullpath
   BASE=$(basename ${FILE})

   # check if already linked
   if [[ $(find "${FILE}" -type l) ]]; then
      echo " ${FILE} --> file already linked "
      continue
   fi 

   if [[ ! $(ls -ld "${MYDOTS}"/config/"${BASE}" 2>/dev/null) ]]; then
      mv -f "${FILE}" "$HOME"/.config/old.config 
   fi
  
   # is file exists
   if [[ $(ls -ld "${FILE}" 2>/dev/null ) ]]; then
      rm -rf "${FILE}" && ln -sf "${MYDOTS}"/config/"${BASE}" "${FILE}"
      echo "R ${MYDOTS}/config/${BASE}       -->  ${FILE}"
   else 
      ln -sf ${MYDOTS}/config/${BASE} ${FILE}
      echo "  ${MYDOTS}/config/${BASE}       -->  ${FILE}"
   fi
done

}

# file loaction
LINKS=(
   "${HOME}"/.vimrc
   "${HOME}"/.xinitrc
   "${HOME}"/.vim/vimplug
   "${HOME}"/.local/bin
   "${HOME}"/.config/dunst
   "${HOME}"/.config/xfce4
   "${HOME}"/.config/alacritty
   "${HOME}"/.config/foot
   "${HOME}"/.config/sxhkd
   "${HOME}"/.config/sxiv
   "${HOME}"/.config/mpd
   "${HOME}"/.config/ncmpcpp
   "${HOME}"/.config/polybar
   "${HOME}"/.config/waybar
   "${HOME}"/.config/nvim
   "${HOME}"/.config/rofi
   "${HOME}"/.config/lf
   "${HOME}"/.config/shell
   "${HOME}"/.config/newsboat
   "${HOME}"/.config/picom.conf
   "${HOME}"/.config/user-dirs.dirs

   "${HOME}"/.config/bspwm
)

# aur packages
aur=(
   python-pywal
   timeshift
   ly
   auto-cpufreq
   betterlockscreen 
   nerd-fonts-jetbrains-mono
   vimix-gtk-themes 
   vimix-cursors 
   # vimix-icon-theme
   quickemu
   ttf-ms-fonts
   colorpicker
   wkhtmltopdf-static
)

# dev tools list
dev_tools=(
   code 
   git
   jdk-openjdk 
   jre-openjdk
   gcc
   python3
   python-pip
)

# arch linux packages 
pkg=(
   # x11 = = =
   xorg-server
   xorg-xinit
   xorg-xbacklight
   xorg-apps
   xdg-utils
   xdg-user-dirs
   xclip
   xsel
   xdotool

   # wayland = = =
   wayland

   # audio = = =
   pipewire
   pipewire-jack
   pipewire-alsa
   pipewire-pulse
   pulsemixer
   wireplumber
   
   htop
   sxiv
   git
   trash-cli
   
   # shell = = = 
   zsh
   zsh-completions 
   zsh-syntax-highlighting 
   zsh-autosuggestions
   bash-completion
   dash

   aria2
   doas
   polkit
   lxsession
   lxqt-policykit
   transmission-gtk
   maked
   libmupdf
   ranger
   lf
	
   # menu/launcher = = =
   rofi
   rofi-calc
   rofi-emoji
   rofimoji
   dmenu
   fzf
   
   ffmpeg
   imagemagick
   polybar
   dunst
   feh
   inotify-tools
   vnstat
   man-db
   zip
   unzip
   xarchiver
   ueberzug
   yt-dlp
   curl
   wget
   tmate
   android-tools
   obs-studio
   
   # theme = = =
   papirus-icon-theme
   gnome-themes-extra
   lxappearance
   qt5ct
   
   # fonts = = =
   ttf-jetbrains-mono
   ttf-jetbrains-mono-nerd
   ttf-dejavu
   ttf-liberation
   ttf-font-awesome
   ttf-nerd-fonts-symbols-common
   noto-fonts-emoji
   
   # multimedia = = =
   mpv
   mpd
   mpc
   playerctl
   ncmpcpp

   conky
   alacritty
   xfce4-terminal
   leafpad
   pcmanfm
   mate-calc
   firefox
   w3m
   vim
   gparted
   mtpfs
   gvfs-mtp
   gvfs-gphoto2
   ntfs-3g
   ytfzf
   entr
   code
   zathura
   zathura-pdf-mupdf
   zathura-djvu
   blueman
   glances
   net-tools
   picom
   gimp
   maim
   gufw
   clamav 
   bat 
)

# setup all
function setup_all() {
   choice=$(grep "^function" ${0} | grep -v "^function main" | awk '{print $2}' | cut -d\( -f1)
   for cmd in ${choice}; do
      eval "${cmd}"
   done
   exit;
}

# ---------------------------------------------------------------------------------------------------------------------------------
main() {
   choice=$(grep "^function" ${0} | grep -v "^function main" | awk '{print $2}' | cut -d\( -f1| fzf -m --prompt "Select multyple options: ")
   for cmd in ${choice}; do
      eval "${cmd}"
   done
   exit;
}

[[ "${1}" == "all" ]] && setup_all
[[ ${1} ]] && ${1} || main ; exit 0 
# ---------------------------------------------------------------------------------------------------------------------------------
