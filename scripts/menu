#!/bin/bash 

# = list items = = =
LIST=(${*})
LENGTH_OF_ARRAY=${#LIST[*]}
INDEX=1
TERMINAL_SIZE=$(stty size)
NUM_COLUMNS="${TERMINAL_SIZE##* }"
NUM_LINES="${TERMINAL_SIZE%% *}"

# = keys = = =
UP="A"
DOWN="B"
ENTER=""
EXIT="q"

# = help = = = 
function help() {
   echo " mneu > list items <"
   exit 1
}

[[ "${1}" ]] || help

# = run on exit = = =
onExit() {
    printf '\033[2J\033[H\033[?1049l' # hide alternate screen 
    printf "\033[?25h" # show cursor
    stty icanon echo 
}

# = run on start = = =
onStart() {
    stty -icanon -echo # echo off 
    printf "\033[?25l" # hide cursor
    printf '\033[?1049h\033[2J\033[H' # show alternate screen
    # trap SIGINT and run on_exit to ensure we clean things up properly.
    trap 'onExit' INT
}

# = print menu = = =
function map() {
   index=0
   for item in "${LIST[@]}"; do
      index=$((index + 1))
      if [[ "${1}" == "${index}" ]]; then 
         echo -e "[ ]>\e[32;1m ${item} \e[0m"
      else
         echo -e "[ ] \e[31m ${item} \e[0m" 
      fi
   done
}

# = read input = = =
function getKey() {
   read -n1 -r KEY;
   echo ${KEY}
   [[ "${KEY}" ]] && echo "DONE"
}

# = main = = = 
onStart
map 1
while true ; do
   set echo off
   read -r -n1 KEY
   set echo on
   # printf '\033c';
   case "${KEY}" in
      "j"|"$DOWN") [[ "${INDEX}" -lt "${LENGTH_OF_ARRAY}" ]] && ((INDEX++)) || INDEX=1    ;;
        "k"|"$UP") [[ "${INDEX}" -gt 1 ]] && ((INDEX--)) || INDEX="${LENGTH_OF_ARRAY}"    ;;
         "$ENTER") onExit ; echo ${LIST[${INDEX} - 1]} ; exit   ;;
          "$EXIT") onExit ; exit ;;
                *) echo "" ;;
   esac
   map "${INDEX}"
done
